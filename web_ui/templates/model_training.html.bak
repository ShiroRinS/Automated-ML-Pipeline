{% extends "base.html" %}

{% block title %}Model Training{% endblock %}

{% block head %}
<!-- Include jQuery first -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Include marked.js for markdown parsing -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<!-- Include Bootstrap tooltips -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>

<!-- Initialize required variables and functions -->
<script>
    // Global variables initialization
    var data_analysis = {% if data_analysis %}{{ data_analysis|tojson|safe }}{% else %}null{% endif %};
    var initial_recommendations = {% if initial_recommendations %}{{ initial_recommendations|tojson|safe }}{% else %}{}{% endif %};
    var selected_features = [];
    var target_column = null;
    var excluded_columns = [];
    var categorical_encoding = {
        'label': 'Label Encoding',
        'onehot': 'One-Hot Encoding'
    };
    var DEBUG = true;

    // All function definitions first
    function updateEncodingOptions() {
        if (!data_analysis || !data_analysis.column_info) return;
        
        console.log('Updating encoding options...');
        
        var selectedCategoricalFeatures = $('.feature-item.selected[data-type="categorical"]')
            .map(function() { return $(this).data('feature'); }).get();
        
        console.log('Selected categorical features:', selectedCategoricalFeatures);
        
        var html = '';
        if (selectedCategoricalFeatures.length > 0) {
            html += '<div class="alert alert-info mb-3">Select encoding method for each categorical feature:</div>';
            
            selectedCategoricalFeatures.forEach(function(feature) {
                html += `
                    <div class="mb-3 border p-3 rounded">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label class="form-label mb-0"><strong>${feature}</strong></label>
                        </div>
                        <select class="form-select encoding-select" data-feature="${feature}">
                            <option value="label">Label Encoding (Convert categories to numbers)</option>
                            <option value="onehot">One-Hot Encoding (Create binary columns)</option>
                        </select>
                        <small class="text-muted d-block mt-1">
                            Label encoding is memory efficient but may imply ordering. One-hot encoding is better for truly categorical data.
                        </small>
                    </div>
                `;
            });
        } else {
            html = '<div class="alert alert-info">Select categorical features to configure encoding options</div>';
        }
        
        $('#categoricalEncodingOptions').html(html);
    }

    function initializeFeatureFiltering() {
        // Show numeric features only
        $('#showNumeric').click(function() {
            $('.feature-item').hide();
            $('.feature-item[data-type="numeric"]').show();
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });
        
        // Show categorical features only
        $('#showCategorical').click(function() {
            $('.feature-item').hide();
            $('.feature-item[data-type="categorical"]').show();
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });
        
        // Show all features
        $('#showAll').click(function() {
            $('.feature-item').show();
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });
        
        // Initially show all features and highlight the 'All' button
        $('#showAll').addClass('active');
    }

    function updateSelectedFeatures() {
        var selected = [];
        $('.feature-item.selected').each(function() {
            var importance = $(this).data('importance') || 0;
            selected.push({
                name: $(this).data('feature'),
                importance: importance
            });
        });
        
        // Sort by importance
        selected.sort((a, b) => b.importance - a.importance);
        
        // Update UI
        updateSelectedFeaturesList(selected);
        $('#selectedCount').text(`${selected.length} selected`);
        
        // Update encoding options
        updateEncodingOptions();
        
        // Show/hide no features message
        if (selected.length === 0) {
            $('#noFeaturesSelected').show();
        } else {
            $('#noFeaturesSelected').hide();
        }
    }

// Function to initialize feature selection process
function initializeFeatureSelection() {
        console.log('Initializing feature selection...');
        
        // Initialize feature filtering
        initializeFeatureFiltering();
        
        // Initialize feature click handlers
        $('.feature-item').off('click').on('click', function() {
            console.log('Feature clicked:', $(this).find('h6').text());
            $(this).toggleClass('selected');
            updateSelectedFeatures();
        });
        
        // Initially show all features
        $('.feature-item').show();
    }

    function updateSelectedFeaturesList(features) {
        var html = '';
        features.forEach(function(feature) {
            const importance = feature.importance ? (feature.importance * 100).toFixed(2) : '';
            const importanceDisplay = importance ? `<small class="ms-2 opacity-75">${importance}%</small>` : '';
            html += `
                <div class="badge bg-primary p-2 d-flex align-items-center">
                    <span>${feature.name}</span>
                    ${importanceDisplay}
                    <button type="button" class="btn-close btn-close-white ms-2" 
                        data-feature="${feature.name}" 
                        onclick="deselectFeature('${feature.name}')"></button>
                </div>
            `;
        });
        $('#selectedFeatures').html(html || '');
    }

    function deselectFeature(featureName) {
        $(`.feature-item[data-feature="${featureName}"]`).removeClass('selected');
        updateSelectedFeatures();
    }

    function showDataSummary(analysis) {
        if (!analysis) return;
        
        // Update dataset size badge
        $('#datasetSize').text(`${analysis.total_rows} rows Ã— ${analysis.total_columns} columns`);
        
        // Show basic statistics
        let basicStatsHtml = `
            <ul class="list-unstyled mb-0">
                <li><strong>Total Features:</strong> ${analysis.column_info.numeric.length + analysis.column_info.categorical.length}</li>
                <li><strong>Numeric Features:</strong> ${analysis.column_info.numeric.length}</li>
                <li><strong>Categorical Features:</strong> ${analysis.column_info.categorical.length}</li>
                <li><strong>Excluded Columns:</strong> ${analysis.column_info.excluded.length}</li>
            </ul>
        `;
        $('#basicStats').html(basicStatsHtml);
    }

    function showAvailableFeatures(analysis) {
        if (!analysis) return;
        
        let html = '';
        
        // Add numeric features
        analysis.column_info.numeric.forEach(col => {
            const stats = analysis.numeric_stats[col];
            html += `
                <div class="list-group-item feature-item" data-type="numeric" data-feature="${col}">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">${col}</h6>
                        <span class="badge bg-primary">Numeric</span>
                    </div>
                    <p class="mb-1 small">Range: ${stats.min} to ${stats.max}</p>
                    <small class="text-muted">Mean: ${stats.mean.toFixed(2)} | Std: ${stats.std.toFixed(2)}</small>
                </div>
            `;
        });
        
        // Add categorical features
        analysis.column_info.categorical.forEach(col => {
            const stats = analysis.categorical_stats[col];
            html += `
                <div class="list-group-item feature-item" data-type="categorical" data-feature="${col}">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">${col}</h6>
                        <span class="badge bg-success">Categorical</span>
                    </div>
                    <p class="mb-1 small">${stats.unique_values} unique values</p>
                    <small class="text-muted">Most common: ${stats.most_common} (${stats.most_common_pct.toFixed(1)}%)</small>
                </div>
            `;
        });
        
        $('#availableFeatures').html(html);
    }

    // Document ready handler
    $(document).ready(function() {
        if (data_analysis) {
            console.log('Processing data analysis:', data_analysis);
            
            // Show data summary
            showDataSummary(data_analysis);
            showAvailableFeatures(data_analysis);
            
            // Initialize UI components with a small delay
            setTimeout(function() {
                initializeFeatureSelection();
                updateEncodingOptions();
                
                // Show target column selection if needed
                if (!target_column) {
                    showTargetColumnSelection(data_analysis);
                }
            }, 100);
        } else {
            $('#geminiSuggestions').html('<div class="alert alert-warning">Please load data first</div>');
            $('#featureSpinner').hide();
            $('#availableFeatures').html('<div class="alert alert-warning">No data loaded</div>').show();
        }
    });

    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();

    // Function to update encoding options based on selected features
// Function to update encoding options based on selected features
function updateEncodingOptions() {
        if (!data_analysis || !data_analysis.column_info) return;
        
        console.log('Updating encoding options...');
        
        var selectedCategoricalFeatures = $('.feature-item.selected[data-type="categorical"]')
            .map(function() { return $(this).data('feature'); }).get();
        
        console.log('Selected categorical features:', selectedCategoricalFeatures);
        
        var html = '';
        if (selectedCategoricalFeatures.length > 0) {
            html += '<div class="alert alert-info mb-3">Select encoding method for each categorical feature:</div>';
            
            selectedCategoricalFeatures.forEach(function(feature) {
                html += `
                    <div class="mb-3 border p-3 rounded">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label class="form-label mb-0"><strong>${feature}</strong></label>
                        </div>
                        <select class="form-select encoding-select" data-feature="${feature}">
                            <option value="label">Label Encoding (Convert categories to numbers)</option>
                            <option value="onehot">One-Hot Encoding (Create binary columns)</option>
                        </select>
                        <small class="text-muted d-block mt-1">
                            Label encoding is memory efficient but may imply ordering. One-hot encoding is better for truly categorical data.
                        </small>
                    </div>
                `;
            });
        } else {
            html = '<div class="alert alert-info">Select categorical features to configure encoding options</div>';
        }
        
        $('#categoricalEncodingOptions').html(html);
    }

    // Function to initialize feature selection
    function initializeFeatureSelection() {
        console.log('Initializing feature selection...');
        
        // Initialize feature filtering
        initializeFeatureFiltering();
        
        // Initialize feature click handlers
        $('.feature-item').off('click').on('click', function() {
            console.log('Feature clicked:', $(this).find('h6').text());
            $(this).toggleClass('selected');
            updateSelectedFeatures();
        });
    }

    // Document ready handler
    $(document).ready(function() {
        if (data_analysis) {
            console.log('Processing data analysis:', data_analysis);
            
            // Show data summary
            showDataSummary(data_analysis);
            showAvailableFeatures(data_analysis);
            
            // Initialize UI components
            setTimeout(function() {
                initializeFeatureSelection();
                updateEncodingOptions();
                
                // Show target column selection if needed
                if (!target_column) {
                    showTargetColumnSelection(data_analysis);
                }
            }, 100);
        } else {
            $('#geminiSuggestions').html('<div class="alert alert-warning">Please load data first</div>');
            $('#featureSpinner').hide();
            $('#availableFeatures').html('<div class="alert alert-warning">No data loaded</div>').show();
        }
    });
    
// Function to update encoding options based on selected features
    function updateEncodingOptions() {
        if (!data_analysis || !data_analysis.column_info) return;
        
        console.log('Updating encoding options...');
        
        var selectedCategoricalFeatures = $('.feature-item.selected[data-type="categorical"]')
            .map(function() { return $(this).data('feature'); }).get();
        
        console.log('Selected categorical features:', selectedCategoricalFeatures);
        
        var html = '';
        if (selectedCategoricalFeatures.length > 0) {
            html += '<div class="alert alert-info mb-3">Select encoding method for each categorical feature:</div>';
            
            selectedCategoricalFeatures.forEach(function(feature) {
                html += `
                    <div class="mb-3 border p-3 rounded">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label class="form-label mb-0"><strong>${feature}</strong></label>
                        </div>
                        <select class="form-select encoding-select" data-feature="${feature}">
                            <option value="label">Label Encoding (Convert categories to numbers)</option>
                            <option value="onehot">One-Hot Encoding (Create binary columns)</option>
                        </select>
                        <small class="text-muted d-block mt-1">
                            Label encoding is memory efficient but may imply ordering. One-hot encoding is better for truly categorical data.
                        </small>
                    </div>
                `;
            });
        } else {
            html = '<div class="alert alert-info">Select categorical features to configure encoding options</div>';
        }
        
        $('#categoricalEncodingOptions').html(html);
        
        // Initialize tooltips if using Bootstrap 5
        if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
            $('[data-bs-toggle="tooltip"]').tooltip();
        }
    }
    
    // Debug flag
    var DEBUG = true;
    
    // Feature selection initialization function
    function initializeFeatureSelection() {
        console.log('Initializing feature selection...');
        
        // Show numeric features only
        $('#showNumeric').click(function() {
            $('.feature-item').hide();
            $('.feature-item[data-type="numeric"]').show();
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });
        
        // Show categorical features only
        $('#showCategorical').click(function() {
            $('.feature-item').hide();
            $('.feature-item[data-type="categorical"]').show();
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });
        
        // Show all features
        $('#showAll').click(function() {
            $('.feature-item').show();
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });
        
        // Initialize feature click handlers
        $('.feature-item').off('click').on('click', function() {
            console.log('Feature clicked:', $(this).find('h6').text());
            $(this).toggleClass('selected');
            updateSelectedFeatures();
        });
        
        // Initially show all features and highlight the 'All' button
        $('#showAll').addClass('active');
        $('.feature-item').show();
    }
    
    // Update selected features
    function updateSelectedFeatures() {
        var selectedFeatures = $('.feature-item.selected').map(function() {
            return $(this).find('h6').text();
        }).get();
        
        // Update the count
        $('#selectedCount').text(selectedFeatures.length + ' selected');
        
        // Update the selected features display
        var html = '';
        selectedFeatures.forEach(function(feature) {
            html += `
                <div class="badge bg-primary p-2 me-2 mb-2">
                    ${feature}
                    <button type="button" class="btn-close btn-close-white ms-2" 
                        onclick="deselectFeature('${feature}')"></button>
                </div>
            `;
        });
        $('#selectedFeatures').html(html);
        
        // Show/hide the no features message
        if (selectedFeatures.length === 0) {
            $('#noFeaturesSelected').show();
        } else {
            $('#noFeaturesSelected').hide();
        }
    }
    
    // Deselect a feature
    function deselectFeature(featureName) {
        $(`.feature-item:contains('${featureName}')`).removeClass('selected');
        updateSelectedFeatures();
    }
    
    // Log data analysis if available
    if (DEBUG) {
        console.log('Data Analysis:', data_analysis);
    }
</script>

<!-- Include custom suggestions script -->
<script src="{{ url_for('static', filename='js/show_suggestions.js') }}"></script>
{% endblock %}

{% block content %}
<div class="container-fluid">
    {% if error %}
    <div class="alert alert-danger" role="alert">
        {{ error }}
    </div>
    {% endif %}
    
    <!-- Data Summary Section -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Dataset Overview</h5>
            <span class="badge bg-primary" id="datasetSize"></span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <!-- Basic Stats -->
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Basic Statistics</h6>
                        </div>
                        <div class="card-body" id="basicStats">
                            <!-- Basic stats will be populated here -->
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <!-- Column Types -->
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Column Types</h6>
                        </div>
                        <div class="card-body" id="columnTypes">
                            <!-- Column types will be populated here -->
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <!-- Data Quality -->
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Data Quality</h6>
                        </div>
                        <div class="card-body" id="dataQuality">
                            <!-- Data quality info will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
<!-- Feature Settings Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Feature Settings</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6>Categorical Encoding</h6>
                    <div id="categoricalEncodingOptions">
                        <!-- Will be populated dynamically -->
                    </div>
                </div>
                <div class="col-md-6">
                    <h6>Feature Scaling</h6>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="standardScaling" checked>
                        <label class="form-check-label" for="standardScaling">
                            Apply standard scaling to numeric features
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Feature Selection Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Feature Selection</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <!-- Available Features -->
                    <div class="card h-100">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Available Features</h6>
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-primary" id="showNumeric">Numeric</button>
                                <button type="button" class="btn btn-outline-primary" id="showCategorical">Categorical</button>
                                <button type="button" class="btn btn-outline-primary" id="showAll">All</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="availableFeatures" class="list-group list-group-flush">
                                <!-- Available features will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <!-- Selected Features -->
                    <div class="card h-100">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Selected Features</h6>
                            <span class="badge bg-primary" id="selectedCount">0 selected</span>
                        </div>
                        <div class="card-body">
                            <div id="selectedFeatures" class="d-flex flex-wrap gap-2">
                                <!-- Selected features will be shown here -->
                            </div>
                            <div id="noFeaturesSelected" class="alert alert-info mt-3">
                                Select features from the available list to begin training.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Feature Selection Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Feature Selection</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-12">
                    <!-- Selected Features -->
                    <div class="card">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Selected Features</h6>
                            <span class="badge bg-primary" id="selectedCount">0 selected</span>
                        </div>
                        <div class="card-body">
                            <div id="selectedFeatures" class="d-flex flex-wrap gap-2">
                                <!-- Selected features will be shown here -->
                            </div>
                            <div id="noFeaturesSelected" class="alert alert-warning mt-3" style="display: none;">
                                No features selected. Click on features in the importance chart above to select them for training.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Initial Training Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Initial Training</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <!-- Training Parameters -->
                    <div class="form-group">
                        <label for="testSize">Test Size</label>
                        <input type="range" class="form-control-range" id="testSize" min="10" max="40" value="20">
                        <small class="form-text text-muted">Test set size: <span id="testSizeValue">20</span>%</small>
                    </div>
                    <button class="btn btn-primary" id="trainButton">Train Model</button>
                </div>
                <div class="col-md-8">
                    <!-- Training Results -->
                    <div id="trainingResults" style="display: none;">
                        <h6>Training Results</h6>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="info-box">
                                    <h6>Training Score</h6>
                                    <p id="trainScore">-</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="info-box">
                                    <h6>Test Score</h6>
                                    <p id="testScore">-</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="info-box">
                                    <h6>CV Score</h6>
                                    <p id="cvScore">-</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="info-box">
                                    <h6>Feature Count</h6>
                                    <p id="featureCount">-</p>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <!-- Classification Report -->
                                <div class="card">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">Classification Report</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="classificationReport"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <!-- Confusion Matrix -->
                                <div class="card">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">Confusion Matrix</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="confusionMatrix"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Model Tuning Section -->
    <div class="card mb-4" id="tuningSection" style="display: none;">
        <div class="card-header">
            <h5 class="mb-0">Model Tuning</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <!-- Hyperparameter Settings -->
                    <div class="card">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Hyperparameters</h6>
                        </div>
                        <div class="card-body">
                            <form id="hyperparametersForm">
                                <!-- Parameters will be added here -->
                            </form>
                            <button class="btn btn-primary mt-3" id="tuneButton">Tune Model</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-8">
                    <!-- Tuning Results -->
                    <div id="tuningResults" style="display: none;">
                        <h6>Tuning Results</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <!-- Best Parameters -->
                                <div class="card">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">Best Parameters</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="bestParams"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <!-- Performance Improvement -->
                                <div class="card">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">Performance Improvement</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="performanceImprovement"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row mt-4">
        <div class="col-12">
            <button class="btn btn-secondary" id="backButton">Back to Data Cleaning</button>
            <button class="btn btn-success" id="saveModelButton" style="display: none;">Save Model</button>
        </div>
    </div>
</div>

<!-- Custom Styles -->
<style>
.info-box {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    text-align: center;
}
.info-box h6 {
    margin-bottom: 5px;
    color: #666;
}
.info-box p {
    font-size: 1.2em;
    margin: 0;
    font-weight: bold;
}
.feature-item {
    cursor: pointer;
    user-select: none;
    transition: all 0.2s ease;
    padding: 10px;
    border-left: 3px solid transparent;
}

.feature-item:hover {
    background-color: #f8f9fa;
    border-left: 3px solid #0d6efd;
}

.feature-item.selected {
    background-color: #e7f0ff;
    border-left: 3px solid #0d6efd;
}
.feature-item:hover {
    background-color: #f8f9fa;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}
.feature-item.selected {
    background-color: #e7f0ff;
    border-left: 3px solid #0d6efd;
}

/* Markdown Content Styling */
.markdown-content {
    font-size: 0.95em;
    line-height: 1.6;
}

.markdown-content h3 {
    color: #0d6efd;
    font-size: 1.2em;
    margin-top: 1.5em;
    margin-bottom: 1em;
    padding-bottom: 0.5em;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    align-items: center;
    gap: 0.5em;
}

.markdown-content h3:first-child {
    margin-top: 0;
}

.markdown-content ul {
    list-style: none;
    padding-left: 1.2em;
    margin-bottom: 1.5em;
}

.markdown-content li {
    margin-bottom: 0.8em;
    position: relative;
}

.markdown-content li::before {
    content: 'â€¢';
    color: #0d6efd;
    font-weight: bold;
    position: absolute;
    left: -1.2em;
}

.markdown-content strong {
    color: #0d6efd;
    font-weight: 600;
}

.markdown-content p {
    margin-bottom: 1em;
}

.markdown-content code {
    background-color: #f8f9fa;
    padding: 0.2em 0.4em;
    border-radius: 3px;
    color: #d63384;
    font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.875em;
}
</style>

<!-- Custom Scripts -->
<script>
// Initialize data analysis
var data_analysis = {% if data_analysis %}{{ data_analysis|tojson|safe }}{% else %}null{% endif %};
var selected_features = [];
var target_column = null;
var excluded_columns = [];

// Dynamic feature descriptions
let descriptions = {};

// Initialize recommendations if not already defined
if (typeof initial_recommendations === 'undefined') {
    var initial_recommendations = null;
}

// Debug output
console.log('Initial recommendations:', initial_recommendations || 'not defined');

// Check recommendations safely
if (initial_recommendations && initial_recommendations.feature_importances) {
    console.log('Feature importances:', initial_recommendations.feature_importances);
}
$(document).ready(function() {
    {% if data_loaded and data_analysis %}
        console.log('Processing data analysis:', data_analysis);
        
        // Show data summary
        showDataSummary(data_analysis);
        showAvailableFeatures(data_analysis);
        
        // Initialize feature selection after a short delay to ensure DOM is ready
        setTimeout(function() {
            if (typeof initializeFeatureSelection === 'function') {
                initializeFeatureSelection();
            } else {
                console.error('Feature selection initialization failed: function not found');
            }
        }, 100);
        
        // Show target column selection if needed
        if (!target_column) {
            showTargetColumnSelection(data_analysis);
        }
        if (!target_column) {
            showTargetColumnSelection(data_analysis);
        }
    {% else %}
        $('#geminiSuggestions').html('<div class="alert alert-warning">Please load data first</div>');
        $('#featureSpinner').hide();
        $('#availableFeatures').html('<div class="alert alert-warning">No data loaded</div>').show();
    {% endif %}
    
// Feature selection handling
    $(document).on('click', '.feature-item', function(e) {
        // Toggle selection
        $(this).toggleClass('selected');
        updateSelectedFeatures();
    });
    
    // Initialize selected features count
    updateSelectedFeatures();
    
    // Test size slider
    $('#testSize').on('input', function() {
        $('#testSizeValue').text($(this).val());
    });
    
    // Train button
    $('#trainButton').click(function() {
        trainModel();
    });
    
    // Tune button
    $('#tuneButton').click(function() {
        tuneModel();
    });
    
    // Save model button
    $('#saveModelButton').click(function() {
        saveModel();
    });
    
    // Back button
    $('#backButton').click(function() {
        window.location.href = '/clean-data';
    });
});

// Function to display data summary
function showDataSummary(analysis) {
    // Update dataset size badge
    $('#datasetSize').text(`${analysis.total_rows} rows Ã— ${analysis.total_columns} columns`);
    
    // Show basic statistics
    let basicStatsHtml = `
        <ul class="list-unstyled mb-0">
            <li><strong>Total Features:</strong> ${analysis.column_info.numeric.length + analysis.column_info.categorical.length}</li>
            <li><strong>Numeric Features:</strong> ${analysis.column_info.numeric.length}</li>
            <li><strong>Categorical Features:</strong> ${analysis.column_info.categorical.length}</li>
            <li><strong>Excluded Columns:</strong> ${analysis.column_info.excluded.length}</li>
        </ul>
    `;
    $('#basicStats').html(basicStatsHtml);
    
    // Show column types
    let columnTypesHtml = '<div class="list-group list-group-flush">';
    
    // Add numeric columns
    analysis.column_info.numeric.forEach(col => {
        const stats = analysis.numeric_stats[col];
        columnTypesHtml += `
            <div class="list-group-item">
                <h6 class="mb-1">${col}</h6>
                <small class="text-muted">Numeric | Range: ${stats.min} to ${stats.max}</small>
            </div>
        `;
    });
    
    // Add categorical columns
    analysis.column_info.categorical.forEach(col => {
        const stats = analysis.categorical_stats[col];
        columnTypesHtml += `
            <div class="list-group-item">
                <h6 class="mb-1">${col}</h6>
                <small class="text-muted">Categorical | ${stats.unique_values} unique values</small>
            </div>
        `;
    });
    
    columnTypesHtml += '</div>';
    $('#columnTypes').html(columnTypesHtml);
    
    // Show data quality
    let qualityHtml = '<div class="list-group list-group-flush">';
    
    // Add missing value information
    const totalMissing = analysis.total_rows * analysis.total_columns;
    const missingPct = ((analysis.missing_values_total / totalMissing) * 100).toFixed(2);
    
    qualityHtml += `
        <div class="list-group-item">
            <h6 class="mb-1">Missing Values</h6>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar bg-warning" style="width: ${missingPct}%"></div>
            </div>
            <small class="text-muted">${analysis.missing_values_total} cells (${missingPct}%)</small>
        </div>
    `;
    
    // Add column specific quality info
    [...analysis.column_info.numeric, ...analysis.column_info.categorical].forEach(col => {
        const stats = analysis.numeric_stats[col] || analysis.categorical_stats[col];
        if (stats.missing_pct > 0) {
            qualityHtml += `
                <div class="list-group-item">
                    <small class="text-muted">${col}: ${stats.missing_pct.toFixed(1)}% missing</small>
                </div>
            `;
        }
    });
    
    qualityHtml += '</div>';
    $('#dataQuality').html(qualityHtml);
}

// Function to show available features
function showAvailableFeatures(analysis) {
    let html = '';
    
    // Add numeric features
    analysis.column_info.numeric.forEach(col => {
        const stats = analysis.numeric_stats[col];
        html += `
            <div class="list-group-item feature-item" data-type="numeric" data-feature="${col}">
                <div class="d-flex w-100 justify-content-between">
                    <h6 class="mb-1">${col}</h6>
                    <span class="badge bg-primary">Numeric</span>
                </div>
                <p class="mb-1 small">Range: ${stats.min} to ${stats.max}</p>
                <small class="text-muted">Mean: ${stats.mean.toFixed(2)} | Std: ${stats.std.toFixed(2)}</small>
            </div>
        `;
    });
    
    // Add categorical features
    analysis.column_info.categorical.forEach(col => {
        const stats = analysis.categorical_stats[col];
        html += `
            <div class="list-group-item feature-item" data-type="categorical" data-feature="${col}">
                <div class="d-flex w-100 justify-content-between">
                    <h6 class="mb-1">${col}</h6>
                    <span class="badge bg-success">Categorical</span>
                </div>
                <p class="mb-1 small">${stats.unique_values} unique values</p>
                <small class="text-muted">Most common: ${stats.most_common} (${stats.most_common_pct.toFixed(1)}%)</small>
            </div>
        `;
    });
    
    $('#availableFeatures').html(html);
    
    // Initialize feature filtering
    initializeFeatureFiltering();
}

function showFeatureImportance(importances) {
    $('#featureSpinner').hide();
    var html = '<div class="list-group">';
    
    // Sort features by importance
    importances.sort((a, b) => b.importance - a.importance);
    
    // Display features with importance scores
    importances.forEach(function(item) {
        var importance = (item.importance * 100).toFixed(2);
        html += `
            <div class="list-group-item feature-item" data-feature="${item.feature}" data-importance="${item.importance}" data-bs-toggle="tooltip" data-bs-placement="right" title="${descriptions[item.feature]?.full || 'No detailed description available'}">
                <div class="d-flex w-100 justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-1">${item.feature}</h6>
                        <small class="text-muted">Predictive Power: ${importance}%</small>
                    </div>
                    <span class="badge bg-primary">#${importances.indexOf(item) + 1}</span>
                </div>
                <div class="progress mt-2" style="height: 8px;">
                    <div class="progress-bar bg-primary" role="progressbar" 
                         style="width: ${importance}%" 
                         title="${importance}% importance">
                    </div>
                </div>
            </div>`;
    });
    
    html += '</div>';
    $('#featureImportanceChart').html(html).show();
    
    // Initialize tooltips after adding elements to DOM
    initTooltips();
}

// Function to initialize feature filtering
function initializeFeatureFiltering() {
    // Show numeric features only
    $('#showNumeric').click(function() {
        $('.feature-item').hide();
        $('.feature-item[data-type="numeric"]').show();
        $('.btn-group .btn').removeClass('active');
        $(this).addClass('active');
    });
    
    // Show categorical features only
    $('#showCategorical').click(function() {
        $('.feature-item').hide();
        $('.feature-item[data-type="categorical"]').show();
        $('.btn-group .btn').removeClass('active');
        $(this).addClass('active');
    });
    
    // Show all features
    $('#showAll').click(function() {
        $('.feature-item').show();
        $('.btn-group .btn').removeClass('active');
        $(this).addClass('active');
    });
    
    // Initially show all features and highlight the 'All' button
    $('#showAll').addClass('active');
}

function initTooltips() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.forEach(function (tooltipTriggerEl) {
        new bootstrap.Tooltip(tooltipTriggerEl, {
            html: true,
            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner text-start" style="max-width: 300px;"></div></div>'
        });
    });
}

function generateFeatureDescriptions(features) {
    // Automatically generate descriptions based on feature properties
    features.forEach(feature => {
        const name = feature.name;
        const sampleValues = feature.sample_values || [];
        const type = feature.type || 'unknown';
        const missingPct = feature.missing_pct || 0;
        
        let shortDesc = `${name} (${type})`;
        let fullDesc = `${name}: ${type} feature. `;
        
        // Add information about missing values
        if (missingPct > 0) {
            fullDesc += `Contains ${missingPct.toFixed(1)}% missing values. `;
        }
        
        // Add sample values if available
        if (sampleValues.length > 0) {
            fullDesc += `Example values: ${sampleValues.slice(0, 3).join(', ')}. `;
        }
        
        descriptions[name] = {
            short: shortDesc,
            full: fullDesc
        };
    });
}

function loadFeaturesFromImportance(importances) {

    var features = importances.map(item => ({
        name: item.feature,
        importance: item.importance,
        type: descriptions[item.feature]?.short || 'No description available'
    }));

    loadFeatures(features);
}

// Function to update the list of selected features
function updateSelectedFeatures() {
    var selected = [];
    $('.feature-item.selected').each(function() {
        var importance = $(this).data('importance') || 0; // Default to 0 if not set
        selected.push({
            name: $(this).data('feature'),
            importance: importance
        });
    });
    
    // Sort by importance
    selected.sort((a, b) => b.importance - a.importance);
    
    // Update UI
    updateSelectedFeaturesList(selected);
    $('#selectedCount').text(`${selected.length} selected`);
    
    // Update encoding options
    updateEncodingOptions();
    
    // Show/hide no features message
    if (selected.length === 0) {
        $('#noFeaturesSelected').show();
    } else {
        $('#noFeaturesSelected').hide();
    }
}

// Function to update the displayed list of selected features
function updateSelectedFeaturesList(features) {
    var html = '';
    features.forEach(function(feature) {
        const importance = feature.importance ? (feature.importance * 100).toFixed(2) : '';
        const importanceDisplay = importance ? `<small class="ms-2 opacity-75">${importance}%</small>` : '';
        html += `
            <div class="badge bg-primary p-2 d-flex align-items-center">
                <span>${feature.name}</span>
                ${importanceDisplay}
                <button type="button" class="btn-close btn-close-white ms-2" 
                    data-feature="${feature.name}" 
                    onclick="deselectFeature('${feature.name}')"></button>
            </div>
        `;
    });
    $('#selectedFeatures').html(html || '');
}

// Function to deselect a feature
function deselectFeature(featureName) {
    $(`.list-group-item:contains('${featureName}')`).removeClass('selected');
    updateSelectedFeatures();
}

function trainModel() {
    var selectedFeatures = $('.feature-item.selected').map(function() {
        return $(this).data('feature');
    }).get();
    
    if (!target_column) {
        alert('Please select a target variable first');
        return;
    }
    
    if (selectedFeatures.length === 0) {
        alert('Please select at least one feature');
        return;
    }
    
    var testSize = $('#testSize').val() / 100;
    
    $.ajax({
        url: '/api/train-model',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            features: selectedFeatures,
            test_size: testSize,
            target_column: target_column,
            excluded_columns: excluded_columns,
            categorical_encoding: buildCategoricalEncodingConfig()
        }),
        success: function(response) {
            if (response.success) {
                showTrainingResults(response.results);
                $('#tuningSection').show();
                $('#saveModelButton').show();
            } else {
                alert('Error training model: ' + response.error);
            }
        },
        error: function() {
            alert('Error training model');
        }
    });
}

function showTrainingResults(results) {
    $('#trainingResults').show();
    
    // Display metrics
    if (results.metrics) {
        $('#trainScore').text((results.metrics.train_score * 100).toFixed(2) + '%');
        $('#testScore').text((results.metrics.test_score * 100).toFixed(2) + '%');
        $('#cvScore').text((results.metrics.cv_mean * 100).toFixed(2) + '%');
        $('#featureCount').text(results.feature_importance.length);
        
        // Show classification report
        showClassificationReport(results.metrics.classification_report);
        
        // Show confusion matrix
        showConfusionMatrix(results.metrics.confusion_matrix);
    } else {
        console.error('Missing metrics in training results');
        alert('Warning: Training completed but metrics are missing');
    }
}

function showClassificationReport(report) {
    if (!report) return;
    
    var html = '<table class="table table-sm table-bordered">';
    html += '<thead><tr><th>Class</th><th>Precision</th><th>Recall</th><th>F1-score</th><th>Support</th></tr></thead>';
    html += '<tbody>';
    
    // Add per-class metrics
    for (let cls in report) {
        if (cls !== 'accuracy' && cls !== 'macro avg' && cls !== 'weighted avg') {
            html += `<tr>
                <td>${cls}</td>
                <td>${(report[cls].precision * 100).toFixed(2)}%</td>
                <td>${(report[cls].recall * 100).toFixed(2)}%</td>
                <td>${(report[cls].f1_score * 100).toFixed(2)}%</td>
                <td>${report[cls].support}</td>
            </tr>`;
        }
    }
    
    // Add accuracy
    if (report.accuracy) {
        html += `<tr class="table-info">
            <td colspan="3"><strong>Accuracy</strong></td>
            <td colspan="2">${(report.accuracy * 100).toFixed(2)}%</td>
        </tr>`;
    }
    
    html += '</tbody></table>';
    $('#classificationReport').html(html);
}

function showConfusionMatrix(matrix) {
    if (!matrix || !Array.isArray(matrix)) return;
    
    const total = matrix.reduce((sum, row) => sum + row.reduce((a, b) => a + b, 0), 0);
    
    var html = '<table class="table table-sm table-bordered text-center">';
    html += '<thead><tr><th colspan="2" rowspan="2"></th><th colspan="2">Predicted</th></tr>';
    html += '<tr><th>Negative</th><th>Positive</th></tr></thead>';
    html += '<tbody>';
    
    // Add actual values rows
    for (let i = 0; i < matrix.length; i++) {
        html += '<tr>';
        if (i === 0) {
            html += '<th rowspan="2">Actual</th><th>Negative</th>';
        } else {
            html += '<th>Positive</th>';
        }
        
        for (let j = 0; j < matrix[i].length; j++) {
            const percentage = (matrix[i][j] / total * 100).toFixed(1);
            const bgClass = i === j ? 'table-success' : 'table-danger';
            html += `<td class="${bgClass}">${matrix[i][j]}<br><small>(${percentage}%)</small></td>`;
        }
        html += '</tr>';
    }
    
    html += '</tbody></table>';
    $('#confusionMatrix').html(html);
}

function tuneModel() {
    var params = {};
    $('#hyperparametersForm input').each(function() {
        params[$(this).attr('name')] = $(this).val();
    });
    
    $.ajax({
        url: '/api/tune-model',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(params),
        success: function(response) {
            if (response.success) {
                showTuningResults(response.results);
            } else {
                alert('Error tuning model: ' + response.error);
            }
        },
        error: function() {
            alert('Error tuning model');
        }
    });
}

function showTargetColumnSelection(analysis) {
    let modalHtml = `
        <div class="modal fade" id="targetColumnModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select Target Variable</h5>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            Select the column you want to predict. This will be your target variable.
                        </div>
                        <select class="form-select" id="targetColumnSelect">
                            <option value="">Choose target variable...</option>
    `;
    
    // Add numeric columns
    if (analysis.column_info.numeric.length > 0) {
        modalHtml += '<optgroup label="Numeric Columns">';
        analysis.column_info.numeric.forEach(col => {
            modalHtml += `<option value="${col}">${col}</option>`;
        });
        modalHtml += '</optgroup>';
    }
    
    // Add categorical columns
    if (analysis.column_info.categorical.length > 0) {
        modalHtml += '<optgroup label="Categorical Columns">';
        analysis.column_info.categorical.forEach(col => {
            modalHtml += `<option value="${col}">${col}</option>`;
        });
        modalHtml += '</optgroup>';
    }
    
    modalHtml += `
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" id="confirmTargetBtn">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Add modal to body
    $('body').append(modalHtml);
    
    // Show modal
    $('#targetColumnModal').modal('show');
    
    // Handle target selection
    $('#confirmTargetBtn').click(function() {
        target_column = $('#targetColumnSelect').val();
        if (target_column) {
            // Remove target from available features
            $(`.feature-item[data-feature="${target_column}"]`).remove();
            $('#targetColumnModal').modal('hide');
            
            // Show selected target
            showSelectedTarget(target_column, analysis);
        } else {
            alert('Please select a target variable');
        }
    });
}

function showSelectedTarget(column, analysis) {
    const isNumeric = analysis.column_info.numeric.includes(column);
    const stats = isNumeric ? analysis.numeric_stats[column] : analysis.categorical_stats[column];
    
    let targetHtml = `
        <div class="alert alert-success">
            <h6 class="mb-1">Target Variable: ${column}</h6>
            <p class="mb-0 small">
                ${isNumeric ? 
                    `Numeric | Range: ${stats.min} to ${stats.max} | Mean: ${stats.mean.toFixed(2)}` :
                    `Categorical | ${stats.unique_values} classes | Most common: ${stats.most_common} (${stats.most_common_pct.toFixed(1)}%)`
                }
            </p>
        </div>
    `;
    
    // Add target info above feature selection
    $('.card-header:contains("Feature Selection")').after(targetHtml);
}

function buildCategoricalEncodingConfig() {
    let config = {};
    $('.feature-item.selected[data-type="categorical"]').each(function() {
        const feature = $(this).data('feature');
        // For now, default to label encoding. This could be made configurable per feature
        config[feature] = 'label';
    });
    return config;
}

function saveModel() {
    $.post('/api/save-model', function(response) {
        if (response.success) {
            alert('Model saved successfully!');
            window.location.href = '/models';
        } else {
            alert('Error saving model: ' + response.error);
        }
    });
}
</script>
{% endblock %}
